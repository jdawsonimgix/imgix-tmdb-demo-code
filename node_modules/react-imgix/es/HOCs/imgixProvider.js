function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, createContext } from 'react';
var ImgixContext = /*#__PURE__*/createContext();
/**
 * `useImgixContext()` tries to invoke `React.useContext()`. If no context
 * is available, this function returns `undefined`. 
 * @returns The context defined by the closest parent `ImgixProvider`.
 */

function useImgixContext() {
  return useContext(ImgixContext);
}
/**
 * Creates a Provider component that passes `reactImgixProps` as the Context 
 * for child components who use the `useImgixContext()` custom hook or 
 * `React.useContext()` API.
 * @param {React.Element <typeof Component>} children 
 * @param {Object} reactImgixProps 
 * @returns React.Element
 */


function ImgixProvider(_ref) {
  var children = _ref.children,
      reactImgixProps = _objectWithoutProperties(_ref, ["children"]);

  var value = reactImgixProps;

  if (children == null || children.length < 1) {
    console.error("ImgixProvider must have at least one Imgix child component");
  }

  return /*#__PURE__*/React.createElement(ImgixContext.Provider, {
    value: value
  }, children);
}

export { ImgixProvider, useImgixContext };
//# sourceMappingURL=imgixProvider.js.map