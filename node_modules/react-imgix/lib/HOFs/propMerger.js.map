{"version":3,"sources":["../../src/HOFs/propMerger.js"],"names":["mergeProps","src","destination","newProps","newPropKeys","Object","keys","k","v","indexOf","mergeComponentPropsHOF","Component","props","contextProps","childProps"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,WAAN,EAAsB;AAC9C,MAAID,GAAG,IAAI,IAAP,IAAeC,WAAW,KAAK,IAAnC,EAAyC;AACvC,WAAOA,WAAP;AACD;;AACD,MAAID,GAAG,KAAK,IAAR,IAAgBC,WAAW,IAAI,IAAnC,EAAyC;AACvC,WAAOD,GAAP;AACD;;AACD,MAAIA,GAAG,IAAI,IAAP,IAAeC,WAAW,IAAI,IAAlC,EAAwC;AACtC,WAAO,EAAP;AACD;;AAED,MAAMC,QAAQ,qBAAQD,WAAR,CAAd;;AACA,MAAME,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAApB;;AAEA,qCAAqB,eAAeF,GAAf,CAArB,qCAA0C;AAAA;AAAA,QAA9BM,CAA8B;AAAA,QAA3BC,CAA2B;;AACxC,QAAIJ,WAAW,CAACK,OAAZ,CAAoBF,CAApB,KAA0B,CAAC,CAA3B,IAAgCC,CAAC,KAAK,IAA1C,EAAgD;AAC9CL,MAAAA,QAAQ,CAACI,CAAD,CAAR,GAAcC,CAAd;AACD,KAHuC,CAIxC;;;AACA,QAAID,CAAC,KAAK,aAAN,IAAuBA,CAAC,KAAK,gBAAjC,EAAmD;AACjD,UAAIC,CAAC,KAAK,IAAV,EAAgB;AACdL,QAAAA,QAAQ,CAACI,CAAD,CAAR,GAAcP,UAAU,CAACC,GAAG,CAACM,CAAD,CAAJ,EAASJ,QAAQ,CAACI,CAAD,CAAjB,CAAxB;AACD;AACF;AACF;;AACD,SAAOJ,QAAP;AACD,CA1BM;AA4BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,SAAD;AAAA,SAAe,UAACC,KAAD,EAAW;AAC9D,QAAMC,YAAY,GAAG,4BAArB;;AACA,QAAIA,YAAY,IAAI,IAApB,EAA0B;AACxB,0BAAO,6BAAC,SAAD,EAAeD,KAAf,CAAP;AACD;;AAED,QAAME,UAAU,GAAGd,UAAU,CAACa,YAAD,EAAeD,KAAf,CAA7B;AACA,wBAAO,6BAAC,SAAD,EAAeE,UAAf,CAAP;AACD,GARqC;AAAA,CAA/B","sourcesContent":["import React from 'react'\nimport { useImgixContext } from \"../HOCs\"\n\n/**\n * Merges the `src` object into the `destination` object. Destination values are\n * not overwritten by source values. Destination properties that resolve to\n * `undefined` or `null` are not overwritten if a destination value exists\n * unless destination key does not exist . It recursively merges the\n * `imgixParams` and `htmlAttributes` values.\n *\n * @param {Object} src - The Provider component's props object\n * @param {Object} destination - The child component's props object\n * @returns Object with the combined values from `src` & `destination` Objects\n *\n * @example\n *  const src = {\n *    width: 100,\n *    height: 200,\n *    imgixParams: { ar: \"1:2\", dpr: 2},\n *    htmlAttributes: { styles: \"width: 50\" }\n *  }\n *  const destination = {\n *    width: 101,\n *    height: 201,\n *    imgixParams: { dpr: 1 },\n *    htmlAttributes: { styles: \"width: 100\" }\n *  }\n *  const result = mergeProps(src, destination);\n *\n *  {\n *    width: 101,\n *    height: 201,\n *    imgixParams: { ar: \"1:2\", dpr: 1 },\n *    htmlAttributes: { styles: \"width: 100\" }\n *  }\n *\n */\nexport const mergeProps = (src, destination) => {\n  if (src == null && destination !== null) {\n    return destination\n  }\n  if (src !== null && destination == null) {\n    return src;\n  }\n  if (src == null && destination == null) {\n    return {}\n  }\n\n  const newProps = { ...destination }\n  const newPropKeys = Object.keys(newProps);\n\n  for (const [k, v] of Object.entries(src)) {\n    if (newPropKeys.indexOf(k) == -1 && v !== null) {\n      newProps[k] = v;\n    }\n    // recursively merge imgixParams and htmlAttributes\n    if (k === \"imgixParams\" || k === \"htmlAttributes\") {\n      if (v !== null) {\n        newProps[k] = mergeProps(src[k], newProps[k])\n      }\n    }\n  }\n  return newProps;\n}\n\n/**\n * `mergeComponentPropsHOF` tries to invoke `React.useContext()`. If context is \n * `undefined`, context is being accessed outside of an `ImgixContext` provider \n * and the Component is returned as is.\n *\n * Otherwise, it merges a Component's props with the `ImgixContext` props and \n * return a Component with the merged `props`.\n * @param {React.Element <typeof Component} Component -  with defined `props`.\n * @returns Component with merged `props`.\n */\nexport const mergeComponentPropsHOF = (Component) => (props) => {\n  const contextProps = useImgixContext();\n  if (contextProps == null) {\n    return <Component {...props} />\n  }\n\n  const childProps = mergeProps(contextProps, props);\n  return <Component {...childProps} />;\n}\n"],"file":"propMerger.js"}