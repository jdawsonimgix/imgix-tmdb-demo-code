{"version":3,"sources":["../src/constructUrl.js"],"names":["PACKAGE_VERSION","PARAM_EXPANSION","Object","freeze","brightness","contrast","exposure","gamma","highlights","hue","invert","saturation","shaddows","shadows","sharpness","vibrance","blend","border","padding","faces","download","DPI","format","quality","orientation","blurring","halftone","monotone","pixelate","height","width","DEFAULT_OPTIONS","auto","constructUrl","src","longOptions","params","compactParamKeys","extractClientAndPathComponents","client","pathComponents","buildURL","join","keys","keysLength","length","i","key","split","scheme","rest","domain","useHTTPS","ImgixClient","includeLibraryParam","buildURLPublic","imgixParams","options","disableLibraryParam","rawSrc","ixlib"],"mappings":"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","sourcesContent":["/*\nCopyright Â© 2015 by Coursera\nLicensed under the Apache License 2.0, seen https://github.com/coursera/react-imgix/blob/master/LICENSE\n\nMinor syntax modifications have been made\n*/\n\nconst PACKAGE_VERSION = require(\"../package.json\").version;\nimport extractQueryParams from \"./extractQueryParams\";\nimport ImgixClient from \"@imgix/js-core\";\n\n// @see https://www.imgix.com/docs/reference\nvar PARAM_EXPANSION = Object.freeze({\n  // Adjustment\n  brightness: \"bri\",\n  contrast: \"con\",\n  exposure: \"exp\",\n  gamma: \"gam\",\n  highlights: \"high\",\n  hue: \"hue\",\n  invert: \"invert\",\n  saturation: \"sat\",\n  shaddows: \"shad\",\n  shadows: \"shad\",\n  sharpness: \"sharp\",\n  \"unsharp-mask\": \"usm\",\n  \"unsharp-radius\": \"usmrad\",\n  vibrance: \"vib\",\n\n  // Automatic\n  \"auto-features\": \"auto\",\n\n  // Background\n  \"background-color\": \"bg\",\n\n  // Blend\n  blend: \"blend\",\n  \"blend-mode\": \"bm\",\n  \"blend-align\": \"ba\",\n  \"blend-alpha\": \"balph\",\n  \"blend-padding\": \"bp\",\n  \"blend-width\": \"bw\",\n  \"blend-height\": \"bh\",\n  \"blend-fit\": \"bf\",\n  \"blend-crop\": \"bc\",\n  \"blend-size\": \"bs\",\n  \"blend-x\": \"bx\",\n  \"blend-y\": \"by\",\n\n  // Border & Padding\n  border: \"border\",\n  padding: \"pad\",\n\n  // Face Detection\n  \"face-index\": \"faceindex\",\n  \"face-padding\": \"facepad\",\n  faces: \"faces\",\n\n  // Format\n  \"chroma-subsampling\": \"chromasub\",\n  \"color-quantization\": \"colorquant\",\n  download: \"dl\",\n  DPI: \"dpi\",\n  format: \"fm\",\n  \"lossless-compression\": \"lossless\",\n  quality: \"q\",\n\n  // Mask\n  \"mask-image\": \"mask\",\n\n  // Mask\n  \"noise-blur\": \"nr\",\n  \"noise-sharpen\": \"nrs\",\n\n  // Palette n/a\n  // PDF n/a\n  // Pixel Density n/a\n\n  // Rotation\n  \"flip-direction\": \"flip\",\n  orientation: \"or\",\n  \"rotation-angle\": \"rot\",\n\n  // Size\n  \"crop-mode\": \"crop\",\n  \"fit-mode\": \"fit\",\n  \"image-height\": \"h\",\n  \"image-width\": \"w\",\n\n  // Stylize\n  blurring: \"blur\",\n  halftone: \"htn\",\n  monotone: \"mono\",\n  pixelate: \"px\",\n  \"sepia-tone\": \"sepia\",\n\n  // Trim TODO\n  // Watermark TODO\n\n  // Extra\n  height: \"h\",\n  width: \"w\",\n});\n\nvar DEFAULT_OPTIONS = Object.freeze({\n  auto: \"format\", // http://www.imgix.com/docs/reference/automatic#param-auto\n});\n\n/**\n * Construct a URL for an image with an Imgix proxy, expanding image options\n * per the [API reference docs](https://www.imgix.com/docs/reference).\n * @param  {String} src         src of raw image\n * @param  {Object} longOptions map of image API options, in long or short form per expansion rules\n * @return {String}             URL of image src transformed by Imgix\n */\nfunction constructUrl(src, longOptions) {\n  if (!src) {\n    return \"\";\n  }\n  const params = compactParamKeys(longOptions);\n  const { client, pathComponents } = extractClientAndPathComponents(src);\n  return client.buildURL(pathComponents.join(\"/\"), params);\n}\n\nfunction compactParamKeys(longOptions) {\n  const keys = Object.keys(longOptions);\n  const keysLength = keys.length;\n  const params = {};\n  for (let i = 0; i < keysLength; i++) {\n    let key = keys[i];\n    if (PARAM_EXPANSION[key]) {\n      params[PARAM_EXPANSION[key]] = longOptions[key];\n    } else {\n      params[key] = longOptions[key];\n    }\n  }\n\n  return params;\n}\n\nfunction extractClientAndPathComponents(src) {\n  const [scheme, rest] = src.split(\"://\");\n  const [domain, ...pathComponents] = rest.split(\"/\");\n  let useHTTPS = scheme == \"https\";\n\n  const client = new ImgixClient({\n    domain: domain,\n    useHTTPS: useHTTPS,\n    includeLibraryParam: false,\n  });\n\n  return { client, pathComponents };\n}\n\nfunction buildURLPublic(src, imgixParams = {}, options = {}) {\n  const { disableLibraryParam } = options;\n\n  const [rawSrc, params] = extractQueryParams(src);\n\n  return constructUrl(\n    rawSrc,\n    Object.assign(\n      {},\n      params,\n      imgixParams,\n      disableLibraryParam ? {} : { ixlib: `react-${PACKAGE_VERSION}` }\n    )\n  );\n}\n\nexport default constructUrl;\n\nexport { buildURLPublic, compactParamKeys, extractClientAndPathComponents };\n"],"file":"constructUrl.js"}